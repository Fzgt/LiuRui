import{_ as n,c as h,J as e,m as a,a as t,ao as s,o as c,E as o}from"./chunks/framework.E0VnI2yM.js";const y=JSON.parse('{"title":"Refactoring UI 读书笔记","description":"","frontmatter":{"tags":["开发/前端","设计/UI/Refactoring UI","笔记/读书笔记","书籍/Refactoring UI"]},"headers":[],"relativePath":"笔记/🛠️ 开发/Refactoring UI 读书笔记.md","filePath":"笔记/🛠️ 开发/Refactoring UI 读书笔记.md"}'),p={name:"笔记/🛠️ 开发/Refactoring UI 读书笔记.md"},d=a("h1",{id:"refactoring-ui-读书笔记",tabindex:"-1"},[t("Refactoring UI 读书笔记 "),a("a",{class:"header-anchor",href:"#refactoring-ui-读书笔记","aria-label":'Permalink to "Refactoring UI 读书笔记"'},"​")],-1),u=s('<h2 id="如何从零开始" tabindex="-1">如何从零开始 <a class="header-anchor" href="#如何从零开始" aria-label="Permalink to &quot;如何从零开始&quot;">​</a></h2><h3 id="从功能开始-而不是布局" tabindex="-1">从功能开始，而不是布局 <a class="header-anchor" href="#从功能开始-而不是布局" aria-label="Permalink to &quot;从功能开始，而不是布局&quot;">​</a></h3><blockquote><p>Start with a feature, not a layout</p></blockquote><p>先实现功能，然后再考虑布局。对于简单的功能，你甚至可能不需要导航栏、页脚或侧边栏。</p><h3 id="以循环的方式工作" tabindex="-1">以循环的方式工作 <a class="header-anchor" href="#以循环的方式工作" aria-label="Permalink to &quot;以循环的方式工作&quot;">​</a></h3><blockquote><p>Work in cycles</p></blockquote><blockquote><p>Instead of designing everything up front, work in short cycles. Start by designing a simple version of the next feature you want to build.</p></blockquote><p>与其事先设计好一切，不如在短周期内完成工作。从设计下一个要构建的功能的简单版本开始。</p><h3 id="做一个悲观主义者" tabindex="-1">做一个悲观主义者 <a class="header-anchor" href="#做一个悲观主义者" aria-label="Permalink to &quot;做一个悲观主义者&quot;">​</a></h3><blockquote><p>Be a pessimist</p><p>Don’t imply functionality in your designs that you aren’t ready to build.</p></blockquote><p>当你在设计一个新功能时，预计它的构建会很困难。设计你能发布的最小有用版本可以大大降低这种风险。</p><blockquote><p>When you’re designing a new feature, expect it to be hard to build. Designing the smallest useful version you can ship reduces that risk considerably.</p><p>If part of a feature is a “nice-to-have”, design it later. Build the simple version first and you’ll always have something to fall back on.</p></blockquote><p>如果功能的一部分是“锦上添花”的，那么稍后再设计它。首先构建简单版本，这样你总会有东西可以依靠。</p><h2 id="层次结构就是一切" tabindex="-1">层次结构就是一切 <a class="header-anchor" href="#层次结构就是一切" aria-label="Permalink to &quot;层次结构就是一切&quot;">​</a></h2><blockquote><p>Hierarchy is Everything</p></blockquote><blockquote><p>Not all elements are equal</p></blockquote><p>并非所有元素都是平等的</p><h3 id="语义是次要的" tabindex="-1">语义是次要的 <a class="header-anchor" href="#语义是次要的" aria-label="Permalink to &quot;语义是次要的&quot;">​</a></h3><blockquote><p>Semantics are secondary</p></blockquote><p>语义是按钮设计的重要组成部分，但这并不意味着你可以忘记层次结构。</p><p>页面上的每个操作都位于重要性金字塔中的某个位置。大多数页面只有一个真正的主要操作、几个不太重要的次要操作以及一些很少使用的第三级操作。</p><p>PRIMARY ｜SECONDARY｜TERTIARY</p><p>•主要行动应该是显而易见的。固体、高对比度的背景颜色在这里效果很好。 •次要行动应该明确，但不突出。轮廓样式或较低的对比度背景颜色是很好的选择。 •第三级按钮应该是可发现的，但不显眼的。像链接一样对这些操作进行造型通常是最好的方法。</p><p>如果破坏性操作不是页面上的主要操作，则最好使用二级或三级按钮。</p><h3 id="不要在彩色背景上使用灰色文字" tabindex="-1">不要在彩色背景上使用灰色文字 <a class="header-anchor" href="#不要在彩色背景上使用灰色文字" aria-label="Permalink to &quot;不要在彩色背景上使用灰色文字&quot;">​</a></h3><blockquote><p>Don’t use grey text on colored backgrounds</p><p>A better approach is to hand-pick a new color, based on the background color. Choose a color with the same hue, and adjust the saturation and lightness until it looks right to you.</p></blockquote><p>更好的方法是根据背景色手工挑选新的颜色。</p><p>选择相同色调的颜色，然后调整饱和度和明度，直到你觉得合适为止。</p><h3 id="标签是最后的手段" tabindex="-1">标签是最后的手段 <a class="header-anchor" href="#标签是最后的手段" aria-label="Permalink to &quot;标签是最后的手段&quot;">​</a></h3><blockquote><p>Labels are a last resort</p></blockquote><h2 id="布局和间距" tabindex="-1">布局和间距 <a class="header-anchor" href="#布局和间距" aria-label="Permalink to &quot;布局和间距&quot;">​</a></h2><blockquote><p>Layout and Spacing</p></blockquote><p>使设计变清晰的最简单方法之一就是给每个元素多一点呼吸的空间。</p><h3 id="应删除而不是添加空白" tabindex="-1">应删除而不是添加空白 <a class="header-anchor" href="#应删除而不是添加空白" aria-label="Permalink to &quot;应删除而不是添加空白&quot;">​</a></h3><p>更好的方法是首先给一些东西太多的空间，然后将其删除，直到你对结果感到满意为止。</p><h3 id="密集的用户界面有他们的位置" tabindex="-1">密集的用户界面有他们的位置 <a class="header-anchor" href="#密集的用户界面有他们的位置" aria-label="Permalink to &quot;密集的用户界面有他们的位置&quot;">​</a></h3><p>例如，如果您正在设计某种仪表板，其中需要同时显示大量信息。重要的是让这成为一个深思熟虑的决定，而不仅仅是默认。当您需要删除空格时，比需要添加空格时要明显得多。</p><h3 id="缩小画布" tabindex="-1">缩小画布 <a class="header-anchor" href="#缩小画布" aria-label="Permalink to &quot;缩小画布&quot;">​</a></h3><p>如果您很难在大画布上设计一个小界面，请缩小画布！很多时候，当限制是真实的时，设计一些小东西更容易。</p><p>如果您正在构建一个响应式Web应用程序，请尝试从~400px的画布开始，并先设计移动布局。</p><p>一旦你有一个你满意的移动设计，把它带到一个更大尺寸的屏幕上，并在更小的屏幕上调整任何感觉像妥协的东西。很有可能你不必像你想象的那样改变。</p><h3 id="相对尺寸不可缩放" tabindex="-1">相对尺寸不可缩放 <a class="header-anchor" href="#相对尺寸不可缩放" aria-label="Permalink to &quot;相对尺寸不可缩放&quot;">​</a></h3><p>作为一般规则，大屏幕上较大的元素需要比已经相当小的元素缩小得更快——在小屏幕尺寸下，小元素与大元素之间的差异应该不那么极端。</p><h3 id="避免模糊的间距" tabindex="-1">避免模糊的间距 <a class="header-anchor" href="#避免模糊的间距" aria-label="Permalink to &quot;避免模糊的间距&quot;">​</a></h3><blockquote><p>Avoid ambiguous spacing</p></blockquote><p>每当你依靠间距来连接一组元素时，总是确保围绕这组元素的空间比其内部的空间更大——难以理解的界面看起来总是更糟糕。</p><h2 id="设计文本" tabindex="-1">设计文本 <a class="header-anchor" href="#设计文本" aria-label="Permalink to &quot;设计文本&quot;">​</a></h2><blockquote><p>Designing Text</p></blockquote><h3 id="忽略那些少于五种字重的字体" tabindex="-1">忽略那些少于五种字重的字体 <a class="header-anchor" href="#忽略那些少于五种字重的字体" aria-label="Permalink to &quot;忽略那些少于五种字重的字体&quot;">​</a></h3><p>这并不总是对的，但作为一个一般规则，拥有很多不同字重的字体往往比那些只有较少字重的字体制作得更加细致和用心。</p><p>许多字体目录（如谷歌字体）允许你通过“样式数量”来过滤，这是可用字重以及这些字重的斜体变化组合而成。</p><p>一个限制你必须从中选择的选项数量的好方法是将其提高到10+（考虑到斜体）：</p><p>特别是在 Google Fonts 上，这会删除 85% 的可用选项，只剩下不到 50 个无衬线字体可供选择。</p><h4 id="🤔-疑问" tabindex="-1">🤔 疑问 <a class="header-anchor" href="#🤔-疑问" aria-label="Permalink to &quot;🤔 疑问&quot;">​</a></h4><p>这种方法对中文字体同样有效吗？</p><h3 id="优化可读性" tabindex="-1">优化可读性 <a class="header-anchor" href="#优化可读性" aria-label="Permalink to &quot;优化可读性&quot;">​</a></h3><p>避免在主 UI 文本中使用 x 高度较矮的压缩字体。</p><h3 id="相信群众的智慧" tabindex="-1">相信群众的智慧 <a class="header-anchor" href="#相信群众的智慧" aria-label="Permalink to &quot;相信群众的智慧&quot;">​</a></h3><p>利用成千上万其他人的集体决策权可以使事情变得容易得多。比如字体排行榜，热门排序等等</p><p>检查一些你最喜欢的网站，看看他们正在使用什么字体。</p><h3 id="保持你的行长度适中" tabindex="-1">保持你的行长度适中 <a class="header-anchor" href="#保持你的行长度适中" aria-label="Permalink to &quot;保持你的行长度适中&quot;">​</a></h3><p>为了获得最佳阅读体验，请确保段落足够宽，每行可容纳 45 到 75 个字符。在 Web 上执行此操作的最简单方法是使用 <code>em</code> 单位，它与当前字体大小相关。 <code>20-35em</code> 的宽度将让您处于正确的范围。</p><h3 id="处理更宽的内容" tabindex="-1">处理更宽的内容 <a class="header-anchor" href="#处理更宽的内容" aria-label="Permalink to &quot;处理更宽的内容&quot;">​</a></h3><p>将段落文本与图像或其他大型组件混合时，即使整体内容区域需要更宽以容纳其他元素，仍应限制段落宽度。结果总是看起来更加精致。</p><h2 id="贡献者" tabindex="-1">贡献者 <a class="header-anchor" href="#贡献者" aria-label="Permalink to &quot;贡献者&quot;">​</a></h2>',65),b=a("h2",{id:"文件历史",tabindex:"-1"},[t("文件历史 "),a("a",{class:"header-anchor",href:"#文件历史","aria-label":'Permalink to "文件历史"'},"​")],-1);function q(k,f,m,g,_,x){const r=o("NolebasePageProperties"),i=o("NolebaseGitContributors"),l=o("NolebaseGitChangelog");return c(),h("div",null,[d,e(r),u,e(i),b,e(l)])}const I=n(p,[["render",q]]);export{y as __pageData,I as default};
